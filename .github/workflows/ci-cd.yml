name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SERVICES: "compliance-service monitoring-service rules-engine auto-remediation-service integration-service api-gateway frontend"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Run tests and package backend services
        run: |
          set -e
          for svc in compliance-service monitoring-service rules-engine auto-remediation-service integration-service; do
            echo "==> Processing backend/$svc"
            pushd backend/$svc
            if [ -x ../../mvnw ]; then
              echo "Using repo mvnw"
              ../../mvnw -B test
              ../../mvnw -B -DskipTests package
            elif command -v mvn >/dev/null 2>&1; then
              mvn -B test
              mvn -B -DskipTests package
            else
              echo "Maven not found and no mvnw available. Failing."
              exit 1
            fi
            popd
          done

      - name: Log in to container registry
        if: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
        run: |
          set -e
          for service in $SERVICES; do
            echo "Building $service"
            if [ "$service" = "frontend" ]; then
              docker build -t ${REGISTRY}/$service:latest -f frontend/Dockerfile frontend
            elif [ "$service" = "api-gateway" ]; then
              docker build -t ${REGISTRY}/$service:latest -f api-gateway/Dockerfile api-gateway
            else
              docker build -t ${REGISTRY}/$service:latest -f backend/$service/Dockerfile .
            fi
            echo "Pushing ${REGISTRY}/$service:latest"
            docker push ${REGISTRY}/$service:latest
          done

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig
        if: secrets.KUBE_CONFIG
        run: |
          echo "$KUBE_CONFIG" | base64 --decode > kubeconfig
          mkdir -p ~/.kube
          mv kubeconfig ~/.kube/config
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f infra/k8s-configmap.yaml
          kubectl apply -f infra/k8s-deployment.yaml
          kubectl apply -f infra/k8s-ingress.yaml
